scalar DateTime

type Player {
    id: ID!
    name: String!
    position: String!
    nationality: String!
    stats: Stat
    contract: Contract
}

type Stat {
    appearances: Int!
    goals: Int!
    assists: Int!
    yellowCards: Int!
    redCards: Int!
}

type Contract {
    start: DateTime!
    end: DateTime!
    salary: Float!
    bonuses: Bonus
}

type Bonus {
    goal: Float!
    assist: Float!
}

type Manager {
    id: ID!
    name: String!
    nationality: String!
    dateOfBirth: DateTime!
}

type Stadium {
    id: ID!
    name: String!
    capacity: Int!
    location: String!
}

type Goal {
    playerId: ID!
    minute: Int!
    player: Player
}

type Lineup {
    starting: [Player!]!
    substitutes: [Player!]!
}

type Match {
    id: ID!
    date: DateTime!
    opponent: String!
    score: String!
    stadium: Stadium
    goals: [Goal!]!
    lineup: Lineup
}

type Season {
    year: Int!
    matchesWon: Int!
    manager: Manager
}

type Trophy {
    id: ID!
    name: String!
    topScorer: Player
    finalsWon: Int!
    seasons: [Season!]!
}

type Query {
    players: [Player!]!
    player(id: ID!): Player
    matches: [Match!]!
    match(id: ID!): Match
    trophies: [Trophy!]!
    trophy(id: ID!): Trophy
    managers: [Manager!]!
    manager(id: ID!): Manager
    stadiums: [Stadium!]!
    stadium(id: ID!): Stadium
}

type Mutation {
    addPlayer(name: String!, position: String!, nationality: String!): Player
    addManager(name: String!, nationality: String!, dateOfBirth: DateTime!): Manager
    addMatch(date: DateTime!, opponent: String!, score: String!, stadiumId: ID!): Match
    addTrophy(name: String!, finalsWon: Int!): Trophy
    addSeason(trophyId: ID!, year: Int!, matchesWon: Int!, managerId: ID!): Trophy
}

